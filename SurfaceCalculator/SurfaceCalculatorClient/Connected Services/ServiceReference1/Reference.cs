//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SurfaceCalculatorClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost:8000", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Square", ReplyAction="http://localhost:8000/ICalculator/SquareResponse")]
        double Square(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Square", ReplyAction="http://localhost:8000/ICalculator/SquareResponse")]
        System.Threading.Tasks.Task<double> SquareAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Rectangle", ReplyAction="http://localhost:8000/ICalculator/RectangleResponse")]
        double Rectangle(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Rectangle", ReplyAction="http://localhost:8000/ICalculator/RectangleResponse")]
        System.Threading.Tasks.Task<double> RectangleAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Triangle", ReplyAction="http://localhost:8000/ICalculator/TriangleResponse")]
        double Triangle(double a, double h);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Triangle", ReplyAction="http://localhost:8000/ICalculator/TriangleResponse")]
        System.Threading.Tasks.Task<double> TriangleAsync(double a, double h);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Circle", ReplyAction="http://localhost:8000/ICalculator/CircleResponse")]
        double Circle(double r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Circle", ReplyAction="http://localhost:8000/ICalculator/CircleResponse")]
        System.Threading.Tasks.Task<double> CircleAsync(double r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Trapeze", ReplyAction="http://localhost:8000/ICalculator/TrapezeResponse")]
        double Trapeze(double a, double b, double h);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost:8000/ICalculator/Trapeze", ReplyAction="http://localhost:8000/ICalculator/TrapezeResponse")]
        System.Threading.Tasks.Task<double> TrapezeAsync(double a, double b, double h);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : SurfaceCalculatorClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<SurfaceCalculatorClient.ServiceReference1.ICalculator>, SurfaceCalculatorClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Square(double a) {
            return base.Channel.Square(a);
        }
        
        public System.Threading.Tasks.Task<double> SquareAsync(double a) {
            return base.Channel.SquareAsync(a);
        }
        
        public double Rectangle(double a, double b) {
            return base.Channel.Rectangle(a, b);
        }
        
        public System.Threading.Tasks.Task<double> RectangleAsync(double a, double b) {
            return base.Channel.RectangleAsync(a, b);
        }
        
        public double Triangle(double a, double h) {
            return base.Channel.Triangle(a, h);
        }
        
        public System.Threading.Tasks.Task<double> TriangleAsync(double a, double h) {
            return base.Channel.TriangleAsync(a, h);
        }
        
        public double Circle(double r) {
            return base.Channel.Circle(r);
        }
        
        public System.Threading.Tasks.Task<double> CircleAsync(double r) {
            return base.Channel.CircleAsync(r);
        }
        
        public double Trapeze(double a, double b, double h) {
            return base.Channel.Trapeze(a, b, h);
        }
        
        public System.Threading.Tasks.Task<double> TrapezeAsync(double a, double b, double h) {
            return base.Channel.TrapezeAsync(a, b, h);
        }
    }
}
